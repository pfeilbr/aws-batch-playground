AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-batch-fargate-example

Parameters:

  SubnetIDs:
    Description: The array of private Subnet IDs for the Subnet group
    Type: List<AWS::EC2::Subnet::Id>    
    Default: subnet-058724041d8b0811a, subnet-0c5df80632215980a

  SecurityGroupIDs:
    Description: The array of security group ids
    Type: List<AWS::EC2::SecurityGroup::Id>    
    Default: sg-90433feb


Globals:
  Function:
    Timeout: 60

Resources:

  BatchServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - batch.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole'

  FargateComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub '${AWS::StackName}-fargate'
      Type: MANAGED
      State: ENABLED
      ComputeResources:
        Type: FARGATE
        MaxvCpus: 128
        Subnets: !Ref SubnetIDs
        SecurityGroupIds: !Ref SecurityGroupIDs
      ServiceRole: !GetAtt BatchServiceRole.Arn
      Tags:
        Name: !Ref AWS::StackName

  FargateJobQueue:
    Type: AWS::Batch::JobQueue
    Properties: 
      JobQueueName: !Sub '${AWS::StackName}-fargate'
      ComputeEnvironmentOrder: 
        - Order: 1
          ComputeEnvironment: !Ref FargateComputeEnvironment
      Priority: 1
      State: ENABLED

  BatchExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      # Policies:
      #   - PolicyDocument:
      #       Version: 2012-10-17
      #       Statement:
      #         - Effect: Allow
      #           Action: 
      #             - 
      #           Resource: 
      #             - 
      
  BatchJobRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: 'batch-job-s3-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:Get*"
                  - "s3:List*"
                Resource: 
                  - !Sub 'arn:aws:s3:::*'
                  - !Sub 'arn:aws:s3:::*/*'


  MyJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties: 
      JobDefinitionName: !Sub '${AWS::StackName}-my-job-01'
      Type: container
      PlatformCapabilities: 
        - FARGATE
      ContainerProperties:
        Image:
          Fn::Join:
            - ""
            - - 137112412989.dkr.ecr.
              - Ref: AWS::Region
              - ".amazonaws.com/amazonlinux:latest"
        Command:
          - echo
          - Hello world
        ExecutionRoleArn: !GetAtt BatchExecutionRole.Arn
        JobRoleArn: !GetAtt BatchJobRole.Arn
        ResourceRequirements:
          - Type: "VCPU"
            Value: "0.25"
          - Type: "MEMORY"
            Value: "512"

Outputs:
  FargateComputeEnvironmentArn:
    Value: !GetAtt FargateComputeEnvironment.ComputeEnvironmentArn
  FargateJobQueueArn:
    Value: !GetAtt FargateJobQueue.JobQueueArn
  MyJobDefinitionArn:
    Value: !Ref MyJobDefinition